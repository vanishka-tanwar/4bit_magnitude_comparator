............................................................Preparation file............................................................ 


Starting new log file Fri Aug 13 22:17:24 2021

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035_redm4 from existing qflow_vars.sh file
Regenerating files for existing project dvsd_cmp
Running yosys for verilog parsing and synthesis
yosys  -s dvsd_cmp.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `dvsd_cmp.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v
Parsing Verilog input from `/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v' to AST representation.
Generating RTLIL representation for module `\dvsd_cmp'.
Note: Assuming pure combinatorial block at /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \dvsd_cmp

3.1.2. Analyzing design hierarchy..
Top module:  \dvsd_cmp
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1 in module dvsd_cmp.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
1/9: $2\greater_than[0:0]
2/9: $2\equal_to[0:0]
3/9: $2\less_than[0:0]
4/9: $1\greater_than[0:0]
5/9: $1\equal_to[0:0]
6/9: $1\less_than[0:0]
7/9: $0\greater_than[0:0]
8/9: $0\equal_to[0:0]
9/9: $0\less_than[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\dvsd_cmp.\less_than' from process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
No latch inferred for signal `\dvsd_cmp.\equal_to' from process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
No latch inferred for signal `\dvsd_cmp.\greater_than' from process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
Removing empty process `dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
Cleaned up 2 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module dvsd_cmp..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
dead port 1/2 on $mux $procmux$13.
dead port 1/2 on $mux $procmux$19.
dead port 1/2 on $mux $procmux$7.
Removed 3 multiplexer ports.
<suppressed ~3 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dvsd_cmp:
creating $alu model for $gt$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:33$2 ($gt): new $alu
creating $alu model for $eq$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:40$3 ($eq): merged with $gt$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:33$2.
creating $alu cell for $gt$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:33$2, $eq$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:40$3: $auto$alumacc.cc:474:replace_alu$31
created 1 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.
<suppressed ~3 debug messages>

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$36: { $auto$alumacc.cc:490:replace_alu$32 [0] $auto$alumacc.cc:490:replace_alu$32 [1] $auto$alumacc.cc:490:replace_alu$32 [2] $auto$alumacc.cc:490:replace_alu$32 [3] }
Optimizing cells in module \dvsd_cmp.
Performed a total of 1 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.
<suppressed ~5 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~137 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.
<suppressed ~6 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 6 unused cells and 27 unused wires.
<suppressed ~7 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\dvsd_cmp' to `<abc-temp-dir>/input.blif'..
Extracted 26 gates and 34 wires to a netlist network with 8 inputs and 3 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        8
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:       23
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        3
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \dvsd_cmp

3.25.2. Analyzing design hierarchy..
Top module:  \dvsd_cmp
Removed 0 unused modules.

3.26. Printing statistics.

=== dvsd_cmp ===

Number of wires:                 21
Number of wire bits:             27
Number of public wires:           5
Number of public wire bits:      11
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 19
$_ANDNOT_                       8
$_AND_                          1
$_AOI3_                         2
$_NAND_                         1
$_OAI3_                         1
$_ORNOT_                        2
$_XNOR_                         3
$_XOR_                          1

3.27. Executing CHECK pass (checking for obvious problems).
checking module dvsd_cmp..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
final dff cell mappings:
DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\dvsd_cmp':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.



LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.

LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
Technology set to osu035_redm4 from existing qflow_vars.sh file
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project dvsd_cmp
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef.
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read: encountered 0 errors and 12 warnings total.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.blif  --lef  /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef --cel /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/dvsd_cmp.cel
No dvsd_cmp.cel1 file found for project. . . no partial blockages to apply to layout.
No dvsd_cmp.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  dvsd_cmp

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035_redm4 from existing qflow_vars.sh file
Regenerating files for existing project dvsd_cmp
Running qrouter 1.4.59.T
qrouter -noc  -s dvsd_cmp.cfg
*** Running stage1 routing with defaults
Nets remaining: 30
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 5
Nets remaining: 4
Nets remaining: 3
Nets remaining: 2
Progress: Stage 1 total routes completed: 65
No failed routes!
*** Running stage3 routing with defaults, 1st round
Nets remaining: 30
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 5
Progress: Stage 3 total routes completed: 121
No failed routes!
*** Running stage3 routing with defaults, 2nd round
Nets remaining: 30
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 5
Progress: Stage 3 total routes completed: 176
No failed routes!
*** Writing DEF file dvsd_cmp_route.def
Final: No failed routes!
*** Writing RC file dvsd_cmp_route.rc
Running annotate.tcl antenna.out /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtlnopwr.v
/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.spc /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtlnopwr.anno.v
/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.anno.spc  /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.sp /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp_powerground
Running annotate.tcl
found cell FILL pinlist vdd gnd
Done with annotate.tcl

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035_redm4 from existing qflow_vars.sh file
Regenerating files for existing project dvsd_cmp
Running magic 8.3.50
magic -dnull -noconsole  migrate_dvsd_cmp.tcl

Magic 8.3 revision 50 - Compiled on Thursday 12 August 2021 01:29:35 AM IST.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "migrate_dvsd_cmp.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:     0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
internal:      0 x 0       (     0,  0    ), (     0,  0    )
Reading LEF data from file /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read: Processed 3179 lines.
Reading DEF data from file dvsd_cmp.def.
This action cannot be undone.
Processed 3 vias total.
Processed 44 subcell instances total.
Processed 13 pins total.
Processed 38 nets total.
DEF read, Line 485 (Warning): Number of nets read (5) does not match the number declared (7).
DEF read: Processed 486 lines.
DEF Read: encountered 1 warning total.
Generating LEF output dvsd_cmp.lef for cell dvsd_cmp:
Diagnostic:  Write LEF header for cell dvsd_cmp
Diagnostic:  Writing LEF output for cell dvsd_cmp
Diagnostic:  Scale value is 0.050000
Extracting AOI22X1 into AOI22X1.ext:
Completed 100%
Extracting BUFX2 into BUFX2.ext:
Completed 100%
Extracting AOI21X1 into AOI21X1.ext:
Completed 100%
Extracting AND2X2 into AND2X2.ext:
Completed 100%
Extracting NAND2X1 into NAND2X1.ext:
Completed 100%
Extracting NOR3X1 into NOR3X1.ext:
Completed 100%
Extracting OAI21X1 into OAI21X1.ext:
Completed 100%
Extracting FILL into FILL.ext:
Completed 100%
Extracting NOR2X1 into NOR2X1.ext:
Completed 100%
Extracting OAI22X1 into OAI22X1.ext:
Completed 100%
Extracting INVX1 into INVX1.ext:
Completed 100%
Extracting dvsd_cmp into dvsd_cmp.ext:
Completed 13%
Completed 20%
Completed 27%
Completed 33%
Completed 40%
Completed 47%
Completed 53%
Completed 60%

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035_redm4 from existing qflow_vars.sh file
Regenerating files for existing project dvsd_cmp
Running magic 8.3.50
magic -dnull -noconsole  /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/generate_gds_dvsd_cmp.tcl

Magic 8.3 revision 50 - Compiled on Thursday 12 August 2021 01:29:35 AM IST.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/generate_gds_dvsd_cmp.tcl" from command line.
Root cell box:









..........................Synthesis file of qflow.....................



Qflow synthesis logfile created on Friday 13 August 2021 10:18:14 PM IST
Running yosys for verilog parsing and synthesis
yosys  -s dvsd_cmp.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `dvsd_cmp.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v
Parsing Verilog input from `/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v' to AST representation.
Generating RTLIL representation for module `\dvsd_cmp'.
Note: Assuming pure combinatorial block at /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \dvsd_cmp

3.1.2. Analyzing design hierarchy..
Top module:  \dvsd_cmp
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1 in module dvsd_cmp.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
     1/9: $2\greater_than[0:0]
     2/9: $2\equal_to[0:0]
     3/9: $2\less_than[0:0]
     4/9: $1\greater_than[0:0]
     5/9: $1\equal_to[0:0]
     6/9: $1\less_than[0:0]
     7/9: $0\greater_than[0:0]
     8/9: $0\equal_to[0:0]
     9/9: $0\less_than[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\dvsd_cmp.\less_than' from process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
No latch inferred for signal `\dvsd_cmp.\equal_to' from process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
No latch inferred for signal `\dvsd_cmp.\greater_than' from process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
Removing empty process `dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
Cleaned up 2 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module dvsd_cmp..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$13.
    dead port 1/2 on $mux $procmux$19.
    dead port 1/2 on $mux $procmux$7.
Removed 3 multiplexer ports.
<suppressed ~3 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dvsd_cmp:
  creating $alu model for $gt$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:33$2 ($gt): new $alu
  creating $alu model for $eq$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:40$3 ($eq): merged with $gt$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:33$2.
  creating $alu cell for $gt$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:33$2, $eq$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:40$3: $auto$alumacc.cc:474:replace_alu$31
  created 1 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.
<suppressed ~3 debug messages>

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_cmp.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$36: { $auto$alumacc.cc:490:replace_alu$32 [0] $auto$alumacc.cc:490:replace_alu$32 [1] $auto$alumacc.cc:490:replace_alu$32 [2] $auto$alumacc.cc:490:replace_alu$32 [3] }
  Optimizing cells in module \dvsd_cmp.
Performed a total of 1 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.
<suppressed ~5 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~137 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.
<suppressed ~6 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 6 unused cells and 27 unused wires.
<suppressed ~7 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\dvsd_cmp' to `<abc-temp-dir>/input.blif'..
Extracted 26 gates and 34 wires to a netlist network with 8 inputs and 3 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        8
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:       23
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        3
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \dvsd_cmp

3.25.2. Analyzing design hierarchy..
Top module:  \dvsd_cmp
Removed 0 unused modules.

3.26. Printing statistics.

=== dvsd_cmp ===

   Number of wires:                 21
   Number of wire bits:             27
   Number of public wires:           5
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 19
     $_ANDNOT_                       8
     $_AND_                          1
     $_AOI3_                         2
     $_NAND_                         1
     $_OAI3_                         1
     $_ORNOT_                        2
     $_XNOR_                         3
     $_XOR_                          1

3.27. Executing CHECK pass (checking for obvious problems).
checking module dvsd_cmp..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\dvsd_cmp':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\dvsd_cmp' to `<abc-temp-dir>/input.blif'..
Extracted 19 gates and 27 wires to a netlist network with 8 inputs and 3 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        7
ABC RESULTS:           NAND2X1 cells:        3
ABC RESULTS:            NOR2X1 cells:        5
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        4
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:        internal signals:       16
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        3
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 27 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port dvsd_cmp.A_in: Missing option -inpad.
Don't map input port dvsd_cmp.B_in: Missing option -inpad.
Mapping port dvsd_cmp.equal_to using BUFX2.
Mapping port dvsd_cmp.greater_than using BUFX2.
Mapping port dvsd_cmp.less_than using BUFX2.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== dvsd_cmp ===

   Number of wires:                 32
   Number of wire bits:             38
   Number of public wires:          32
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 30
     AND2X2                          3
     AOI21X1                         1
     AOI22X1                         1
     BUFX2                           3
     INVX1                           7
     NAND2X1                         3
     NOR2X1                          5
     NOR3X1                          1
     OAI21X1                         4
     OAI22X1                         2

End of script. Logfile hash: e78dcbdc6d
CPU: user 0.23s system 0.01s, MEM: 16.65 MB total, 11.39 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 23% 1x share (0 sec), 13% 18x opt_clean (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef
Cleaning up output syntax
ypostproc.tcl dvsd_cmp_mapped.blif dvsd_cmp /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 200 -c 30 -I dvsd_cmp_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif dvsd_cmp.blif

blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 3 (load 132.867) from node _3_,
driven by INVX1 with strength 102.797 (fF driven at latency 200)
Top fanout load-to-strength ratio is 0.847075 (latency = 169.415 ps)
Top input node fanout is 4 (load 84.1815) from node B_in[3].
0 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 24    	Out: 24    	+0
	"2" gates	In: 6    	Out: 6    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis
Files:
   Verilog: /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtl.v
   Verilog: /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtlnopwr.v
   Verilog: /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtlbb.v
   Spice:   /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.lib" dvsd_cmp.spc dvsd_cmp.xspice

Synthesis script ended on Friday 13 August 2021 10:18:15 PM IST





..................Placement  file........



flow placement logfile created on Friday 13 August 2021 10:29:56 PM IST
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.blif  --lef  /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef --cel /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/dvsd_cmp.cel 
Opened BLIF file (/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.blif) for reading ...
Opened CEL file (/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/dvsd_cmp.cel) for writing...
Loaded /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef file for reading...
1st pass of blif file /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.blif. . .
Reading macros and/or technology data from LEF file. . .
LEF file specifies route layer Y pitch as 2
LEF file specifies route layer X pitch as 1.6
Parsing macro AND2X2
Parsing macro AOI21X1
Parsing macro AOI22X1
Parsing macro BUFX2
Parsing macro NOR3X1
Parsing macro INVX1
Parsing macro NAND2X1
Parsing macro NOR2X1
Parsing macro OAI21X1
Parsing macro OAI22X1
2nd pass of blif file. . .
3rd pass of blif file. . .
Done!
No dvsd_cmp.cel1 file found for project. . . no partial blockages to apply to layout.
No dvsd_cmp.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  dvsd_cmp

twflow version:2.1 date:Mon May 25 21:15:08 EDT 1992
Authors: Bill Swartz, Carl Sechen
         Yale University

syntax version:v1.1 date:Mon May 25 21:11:10 EDT 1992
TimberWolf System Syntax Checker
Authors: Carl Sechen, Kai-Win Lee, Bill Swartz,
         Dahe Chen, and Jimmy Lam
         Yale University

No syntax errors were found

syntax terminated normally with no errors and 0 warning[s]


----------------------------
Total stdcells     :30
Total cell width   :1.63e+04
Total cell height  :6.00e+04
Total cell area    :3.26e+07
Total core area    :3.26e+07
Average cell height:2.00e+03


nocut - replacement for Mincut version:v1.0 date:Mon May 25 21:09:40 EDT 1992
TimberWolf System Floorplan Setup Program
Authors: Carl Sechen, Bill Swartz,
         Yale University

Splitting dvsd_cmp.cel into dvsd_cmp.scel and dvsd_cmp.mcel...
	done!


nocut - replacement for Mincut terminated normally with no errors and 0 warning[s]


TimberWolfMC version:v2.2 date:Mon May 25 21:18:34 EDT 1992
Authors: Carl Sechen, Bill Swartz, Kai-Win Lee
         Dahe Chen, and Jimmy Lam
         Yale University

config version:v1.0 date:Mon May 25 20:57:18 EDT 1992
Row configuration program
    Yale University


config switches:
	Graphics mode on
	config will inherit window



config terminated normally with no errors and 0 warning[s]


TimberWolfMC terminated normally with no errors and 0 warning[s]



TimberWolfSC switches:
	Graphics mode on
	TimberWolfSC will inherit window

TimberWolfSC version:v6.0 date:Mon May 25 21:19:07 EDT 1992
Row-Based Placement and Global Routing Program
Authors: Carl Sechen, Kai-Win Lee, and Bill Swartz,
         Yale University
  0 
  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 
 16  17  18  19  20  21  22  23  24  25  26  27  28  29  30 
 31  32  33  34  35  36  37  38  39  40  41  42  43  44  45 
 46  47  48  49  50  51  52  53  54  55  56  57  58  59  60 
 61  62  63  64  65  66  67  68  69  70  71  72  73  74  75 
 76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 
 91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 
106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 
121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 
136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 
151 152 153 154 155 
 block left edge is at -399
 the longest block length is 8800
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:8320
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =    9
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 8800
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:8320
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   10
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 8800
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:8320
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =    9
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 8800
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:8320
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   10
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 8800
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:8320
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   10
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 8800
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:8320
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =    9
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 8800
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:8320
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =    9
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 8800
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:8320
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   10
 removing redundant feed-through pins
 the connectivity of all the nets is verified


***********************************************
*ACTUAL* FINAL NUMBER OF ROUTING TRACKS: 9
***********************************************


TimberWolfSC terminated normally with no errors and 0 warning[s]


twflow terminated normally with no errors and 0 warning[s]

Running getfillcell to determine cell to use for fill.
getfillcell.tcl dvsd_cmp  /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl dvsd_cmp FILL 
Running place2def.tcl
DEF database: 100 units per micron
Limits: xbot = -750.0 ybot = -530.0 xtop = 8270.0 ytop = 4130.0
Core values: 80.0 100 8400.0 4100
Offsets: 80.0 100
4 routing layers
metal1: 25 vertical tracks from -4um with 2um pitch
metal2: 59 vertical tracks from -3.2um with 1.6um pitch
metal3: 25 vertical tracks from -4um with 2um pitch
metal4: 59 vertical tracks from -3.2um with 1.6um pitch
Summary: Total components = 30
  Fill cells  = 0
  Other cells = 30
Done with place2def.tcl
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 5.0 150.0 PG dvsd_cmp  /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef FILL
Reading FILL macros from LEF file.
Reading DEF file dvsd_cmp.def. . .
Number of rows is 2
Longest row has width 84.0 um
addspacers:  No room for stripes, pitch reduced from 14880.0 to 3744.0.
addspacers:  Inserting 2 stripes of width 4.8 um (5.0 um requested)
  Pitch 37.44 um, offset 22.4 um
stretch:  Number of components is 44
Analysis of DEF file:
Number of components = 30
New number of components = 44
Number of rows = 2
Adjusting obstructions for power striping
Done with addspacers.tcl
Running arrangepins to adjust pin positions for optimal routing.
arrangepins.tcl  dvsd_cmp
Reading info file dvsd_cmp.info. . .
Reading DEF file dvsd_cmp.def. . .
Recalculating pin positions
Writing DEF file dvsd_cmp_mod.def. . .
Done with arrangepins.tcl
blifanno.tcl /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.blif dvsd_cmp.def /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp_anno.blif
Running blifanno.tcl
Reading DEF file dvsd_cmp.def. . .
Done with blifanno.tcl

Generating RTL verilog and SPICE netlist file in directory
   /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis
Files:
   Verilog: /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtl.v
   Verilog: /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtlnopwr.v
   Verilog: /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtlbb.v
   Spice:   /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.spc

Running blif2Verilog.
Running blif2BSpice.
Placement script ended on Friday 13 August 2021 10:30:06 PM IST


........static timing analysis.......................






Qflow static timing analysis logfile created on Friday 13 August 2021 10:30:07 PM IST
Running vesta static timing analysis
vesta --long dvsd_cmp.rtlnopwr.v /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.lib
----------------------------------------------
Vesta static timing analysis tool
for qflow 1.3.17
(c) 2013-2018 Tim Edwards, Open Circuit Design
----------------------------------------------

Parsing library "osu035_stdcells"
End of library at line 6636
Parsing module "dvsd_cmp"
Lib read /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.lib:  Processed 6637 lines.
Verilog netlist read:  Processed 43 lines.
Number of paths analyzed:  0

Top 0 maximum delay paths:
Computed maximum clock frequency (zero margin) = inf MHz
-----------------------------------------

Number of paths analyzed:  0

Top 0 minimum delay paths:
Design meets minimum hold timing.
-----------------------------------------

Number of paths analyzed:  3

Top 3 maximum delay paths:
Path input pin A_in[3] to output pin less_than delay 870.741 ps
      0.0 ps    A_in[3]:             ->   INVX1_3/A
    152.4 ps        _3_:   INVX1_3/Y -> OAI22X1_2/B
    374.8 ps        _5_: OAI22X1_2/Y ->  NOR2X1_1/B
    540.7 ps        _6_:  NOR2X1_1/Y -> NAND2X1_2/B
    672.2 ps       _21_: NAND2X1_2/Y -> AOI22X1_1/D
    761.5 ps       _26_: AOI22X1_1/Y ->   BUFX2_3/A
    870.7 ps  less_than:   BUFX2_3/Y -> less_than

Path input pin A_in[3] to output pin greater_than delay 786.676 ps
      0.0 ps       A_in[3]:             ->   INVX1_3/A
    152.4 ps           _3_:   INVX1_3/Y -> OAI22X1_2/B
    374.8 ps           _5_: OAI22X1_2/Y ->  NOR2X1_1/B
    540.7 ps           _6_:  NOR2X1_1/Y -> AOI21X1_1/A
    655.4 ps          _25_: AOI21X1_1/Y ->   BUFX2_2/A
    786.7 ps  greater_than:   BUFX2_2/Y -> greater_than

Path input pin A_in[1] to output pin equal_to delay 780.737 ps
      0.0 ps   A_in[1]:             ->   INVX1_5/A
     90.9 ps       _7_:   INVX1_5/Y -> NAND2X1_1/B
    222.3 ps       _8_: NAND2X1_1/Y -> OAI21X1_4/C
    335.6 ps      _17_: OAI21X1_4/Y ->  NOR2X1_4/B
    475.2 ps      _18_:  NOR2X1_4/Y ->  AND2X2_2/B
    664.4 ps      _24_:  AND2X2_2/Y ->   BUFX2_1/A
    780.7 ps  equal_to:   BUFX2_1/Y -> equal_to

-----------------------------------------

Number of paths analyzed:  3

Top 3 minimum delay paths:
Path input pin A_in[3] to output pin greater_than delay 269.603 ps
      0.0 ps       A_in[3]:             -> OAI21X1_3/B
     89.0 ps          _15_: OAI21X1_3/Y -> AOI21X1_1/C
    164.4 ps          _25_: AOI21X1_1/Y ->   BUFX2_2/A
    269.6 ps  greater_than:   BUFX2_2/Y -> greater_than

Path input pin B_in[3] to output pin less_than delay 370.309 ps
      0.0 ps    B_in[3]:             -> NAND2X1_3/A
     70.2 ps       _22_: NAND2X1_3/Y ->  AND2X2_3/B
    198.5 ps       _23_:  AND2X2_3/Y -> AOI22X1_1/C
    265.2 ps       _26_: AOI22X1_1/Y ->   BUFX2_3/A
    370.3 ps  less_than:   BUFX2_3/Y -> less_than

Path input pin B_in[0] to output pin equal_to delay 453.137 ps
      0.0 ps   B_in[0]:             -> OAI21X1_4/A
    102.7 ps      _17_: OAI21X1_4/Y ->  NOR2X1_4/B
    236.1 ps      _18_:  NOR2X1_4/Y ->  AND2X2_2/B
    350.6 ps      _24_:  AND2X2_2/Y ->   BUFX2_1/A
    453.1 ps  equal_to:   BUFX2_1/Y -> equal_to

-----------------------------------------



...................................................................routing...................................














Qflow route logfile created on Friday 13 August 2021 10:30:07 PM IST
qrouter -noc  -s dvsd_cmp.cfg
Qrouter detail maze router version 1.4.59.T
Reading LEF data from file /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef.
LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.
LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF file:  Defines site IO (ignored)
LEF file:  Defines site core (ignored)
LEF read: Processed 3179 lines.
LEF Read: encountered 0 errors and 12 warnings total.
Reading DEF data from file dvsd_cmp.def.
Diagnostic: Design name: "dvsd_cmp"
  Processed 3 vias total.
  Processed 44 subcell instances total.
  Processed 13 pins total.
  Processed 38 nets total (0 fixed).
  Processed 2 special nets total (4 fixed).
DEF read: Processed 289 lines.
Output scale = microns / 100, precision 1
No antenna cell defined!
There are 40 nets in this design.
*** Running stage1 routing with defaults
Finished routing net B_in[3]
Nets remaining: 39
Finished routing net A_in[2]
Nets remaining: 38
Finished routing net A_in[3]
Nets remaining: 37
Finished routing net _3_
Nets remaining: 36
Finished routing net A_in[0]
Nets remaining: 35
Finished routing net _0_
Nets remaining: 34
Finished routing net B_in[2]
Nets remaining: 33
Finished routing net _2_
Nets remaining: 32
Finished routing net _4_
Nets remaining: 31
Finished routing net _5_
Nets remaining: 30
Finished routing net _6_
Nets remaining: 29
Finished routing net _7_
Nets remaining: 28
Finished routing net B_in[1]
Nets remaining: 27
Finished routing net _8_
Nets remaining: 26
Finished routing net _9_
Nets remaining: 25
Finished routing net B_in[0]
Nets remaining: 24
Finished routing net _10_
Nets remaining: 23
Finished routing net _12_
Nets remaining: 22
Finished routing net _14_
Nets remaining: 21
Finished routing net _18_
Nets remaining: 20
Finished routing net _20_
Nets remaining: 19
Finished routing net _1_
Nets remaining: 18
Finished routing net A_in[1]
Nets remaining: 17
Finished routing net _11_
Nets remaining: 16
Finished routing net _13_
Nets remaining: 15
Finished routing net _15_
Nets remaining: 14
Finished routing net _25_
Nets remaining: 13
Finished routing net _16_
Nets remaining: 12
Finished routing net _17_
Nets remaining: 11
Finished routing net _19_
Nets remaining: 10
Finished routing net _24_
Nets remaining: 9
Finished routing net _21_
Nets remaining: 8
Finished routing net _22_
Nets remaining: 7
Finished routing net _23_
Nets remaining: 6
Finished routing net _26_
Nets remaining: 5
Finished routing net equal_to
Nets remaining: 4
Finished routing net greater_than
Nets remaining: 3
Finished routing net less_than
Nets remaining: 2

----------------------------------------------
Progress: Stage 1 total routes completed: 65
No failed routes!
----------------------------------------------
*** Running stage3 routing with defaults, 1st round
Finished routing net B_in[3]
Nets remaining: 39
Finished routing net A_in[2]
Nets remaining: 38
Finished routing net A_in[3]
Nets remaining: 37
Finished routing net _3_
Nets remaining: 36
Finished routing net A_in[0]
Nets remaining: 35
Keeping route for net _0_
Finished routing net B_in[2]
Nets remaining: 33
Finished routing net _2_
Nets remaining: 32
Finished routing net _4_
Nets remaining: 31
Finished routing net _5_
Nets remaining: 30
Finished routing net _6_
Nets remaining: 29
Finished routing net _7_
Nets remaining: 28
Finished routing net B_in[1]
Nets remaining: 27
Finished routing net _8_
Nets remaining: 26
Finished routing net _9_
Nets remaining: 25
Finished routing net B_in[0]
Nets remaining: 24
Keeping route for net _10_
Finished routing net _12_
Nets remaining: 22
Finished routing net _14_
Nets remaining: 21
Finished routing net _18_
Nets remaining: 20
Finished routing net _20_
Nets remaining: 19
Finished routing net _1_
Nets remaining: 18
Finished routing net A_in[1]
Nets remaining: 17
Finished routing net _11_
Nets remaining: 16
Finished routing net _13_
Nets remaining: 15
Finished routing net _15_
Nets remaining: 14
Finished routing net _25_
Nets remaining: 13
Keeping route for net _16_
Keeping route for net _17_
Finished routing net _19_
Nets remaining: 10
Finished routing net _24_
Nets remaining: 9
Finished routing net _21_
Nets remaining: 8
Finished routing net _22_
Nets remaining: 7
Finished routing net _23_
Nets remaining: 6
Finished routing net _26_
Nets remaining: 5
Keeping route for net equal_to
Keeping route for net greater_than
Keeping route for net less_than

----------------------------------------------
Progress: Stage 3 total routes completed: 121
No failed routes!
----------------------------------------------
*** Running stage3 routing with defaults, 2nd round
Finished routing net B_in[3]
Nets remaining: 39
Finished routing net A_in[2]
Nets remaining: 38
Finished routing net A_in[3]
Nets remaining: 37
Finished routing net _3_
Nets remaining: 36
Finished routing net A_in[0]
Nets remaining: 35
Keeping route for net _0_
Finished routing net B_in[2]
Nets remaining: 33
Finished routing net _2_
Nets remaining: 32
Finished routing net _4_
Nets remaining: 31
Finished routing net _5_
Nets remaining: 30
Finished routing net _6_
Nets remaining: 29
Finished routing net _7_
Nets remaining: 28
Finished routing net B_in[1]
Nets remaining: 27
Finished routing net _8_
Nets remaining: 26
Finished routing net _9_
Nets remaining: 25
Finished routing net B_in[0]
Nets remaining: 24
Keeping route for net _10_
Finished routing net _12_
Nets remaining: 22
Finished routing net _14_
Nets remaining: 21
Finished routing net _18_
Nets remaining: 20
Finished routing net _20_
Nets remaining: 19
Finished routing net _1_
Nets remaining: 18
Finished routing net A_in[1]
Nets remaining: 17
Keeping route for net _11_
Finished routing net _13_
Nets remaining: 15
Finished routing net _15_
Nets remaining: 14
Finished routing net _25_
Nets remaining: 13
Keeping route for net _16_
Keeping route for net _17_
Finished routing net _19_
Nets remaining: 10
Finished routing net _24_
Nets remaining: 9
Finished routing net _21_
Nets remaining: 8
Finished routing net _22_
Nets remaining: 7
Finished routing net _23_
Nets remaining: 6
Finished routing net _26_
Nets remaining: 5
Keeping route for net equal_to
Keeping route for net greater_than
Keeping route for net less_than

----------------------------------------------
Progress: Stage 3 total routes completed: 176
No failed routes!
----------------------------------------------
*** Writing DEF file dvsd_cmp_route.def
emit_routes():  DEF file has 38 nets and 4 specialnets.
but qrouter wants to write 40 nets and specialnets.
----------------------------------------------
Final: No failed routes!
----------------------------------------------
*** Writing RC file dvsd_cmp_route.rc
Running annotate.tcl antenna.out /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtlnopwr.v
  /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.spc /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtlnopwr.anno.v
  /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.anno.spc  /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.sp /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp_powerground
Running annotate.tcl
found cell FILL pinlist vdd gnd
Done with annotate.tcl
Router script ended on Friday 13 August 2021 10:30:08 PM IST



        ..................................................Post Route STA.....................................................
        
        
        
        
        
        
        Qflow static timing analysis logfile created on Friday 13 August 2021 10:30:08 PM IST
Converting qrouter output to vesta delay format
Running rc2dly -r dvsd_cmp.rc -l /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.lib -d dvsd_cmp.dly
Converting qrouter output to SPEF delay format
Running rc2dly -D : -r dvsd_cmp.rc -l /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.lib -d dvsd_cmp.spef
Converting qrouter output to SDF delay format
Running rc2dly -r dvsd_cmp.rc -l /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.lib -d dvsd_cmp.sdf
Running vesta static timing analysis with back-annotated extracted wire delays
vesta -c -d dvsd_cmp.dly --long dvsd_cmp.rtlnopwr.v /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.lib
----------------------------------------------
Vesta static timing analysis tool
for qflow 1.3.17
(c) 2013-2018 Tim Edwards, Open Circuit Design
----------------------------------------------

Parsing library "osu035_stdcells"
End of library at line 6636
Parsing module "dvsd_cmp"
Lib read /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.lib:  Processed 6637 lines.
Verilog netlist read:  Processed 57 lines.
Number of paths analyzed:  0

Top 0 maximum delay paths:
Computed maximum clock frequency (zero margin) = inf MHz
-----------------------------------------

Number of paths analyzed:  0

Top 0 minimum delay paths:
Design meets minimum hold timing.
-----------------------------------------

Number of paths analyzed:  3

Top 3 maximum delay paths:
Path input pin A_in[3] to output pin less_than delay 874.301 ps
      0.2 ps    A_in[3]:             ->   INVX1_3/A
    153.3 ps        _3_:   INVX1_3/Y -> OAI22X1_2/B
    376.7 ps        _5_: OAI22X1_2/Y ->  NOR2X1_1/B
    543.4 ps        _6_:  NOR2X1_1/Y -> NAND2X1_2/B
    675.4 ps       _21_: NAND2X1_2/Y -> AOI22X1_1/D
    764.9 ps       _26_: AOI22X1_1/Y ->   BUFX2_3/A
    874.3 ps  less_than:   BUFX2_3/Y -> less_than

Path input pin A_in[3] to output pin greater_than delay 789.953 ps
      0.2 ps       A_in[3]:             ->   INVX1_3/A
    153.3 ps           _3_:   INVX1_3/Y -> OAI22X1_2/B
    376.7 ps           _5_: OAI22X1_2/Y ->  NOR2X1_1/B
    543.4 ps           _6_:  NOR2X1_1/Y -> AOI21X1_1/A
    658.4 ps          _25_: AOI21X1_1/Y ->   BUFX2_2/A
    790.0 ps  greater_than:   BUFX2_2/Y -> greater_than

Path input pin A_in[1] to output pin equal_to delay 784.101 ps
      0.0 ps   A_in[1]:             ->   INVX1_5/A
     91.6 ps       _7_:   INVX1_5/Y -> NAND2X1_1/B
    224.2 ps       _8_: NAND2X1_1/Y -> OAI21X1_4/C
    338.0 ps      _17_: OAI21X1_4/Y ->  NOR2X1_4/B
    478.1 ps      _18_:  NOR2X1_4/Y ->  AND2X2_2/B
    667.6 ps      _24_:  AND2X2_2/Y ->   BUFX2_1/A
    784.1 ps  equal_to:   BUFX2_1/Y -> equal_to

-----------------------------------------

Number of paths analyzed:  3

Top 3 minimum delay paths:
Path input pin A_in[3] to output pin greater_than delay 270.648 ps
      0.2 ps       A_in[3]:             -> OAI21X1_3/B
     89.5 ps          _15_: OAI21X1_3/Y -> AOI21X1_1/C
    165.3 ps          _25_: AOI21X1_1/Y ->   BUFX2_2/A
    270.6 ps  greater_than:   BUFX2_2/Y -> greater_than

Path input pin B_in[3] to output pin less_than delay 370.762 ps
      0.4 ps    B_in[3]:             -> NAND2X1_3/A
     70.3 ps       _22_: NAND2X1_3/Y ->  AND2X2_3/B
    198.8 ps       _23_:  AND2X2_3/Y -> AOI22X1_1/C
    265.6 ps       _26_: AOI22X1_1/Y ->   BUFX2_3/A
    370.8 ps  less_than:   BUFX2_3/Y -> less_than

Path input pin B_in[0] to output pin equal_to delay 454.054 ps
      0.2 ps   B_in[0]:             -> OAI21X1_4/A
    102.9 ps      _17_: OAI21X1_4/Y ->  NOR2X1_4/B
    236.8 ps      _18_:  NOR2X1_4/Y ->  AND2X2_2/B
    351.4 ps      _24_:  AND2X2_2/Y ->   BUFX2_1/A
    454.1 ps  equal_to:   BUFX2_1/Y -> equal_to

-----------------------------------------



............................................Migration................................................................................





Starting new log file Fri Aug 13 22:17:24 2021

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035_redm4 from existing qflow_vars.sh file
Regenerating files for existing project dvsd_cmp
Running yosys for verilog parsing and synthesis
yosys  -s dvsd_cmp.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `dvsd_cmp.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v
Parsing Verilog input from `/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v' to AST representation.
Generating RTLIL representation for module `\dvsd_cmp'.
Note: Assuming pure combinatorial block at /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \dvsd_cmp

3.1.2. Analyzing design hierarchy..
Top module:  \dvsd_cmp
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1 in module dvsd_cmp.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
1/9: $2\greater_than[0:0]
2/9: $2\equal_to[0:0]
3/9: $2\less_than[0:0]
4/9: $1\greater_than[0:0]
5/9: $1\equal_to[0:0]
6/9: $1\less_than[0:0]
7/9: $0\greater_than[0:0]
8/9: $0\equal_to[0:0]
9/9: $0\less_than[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\dvsd_cmp.\less_than' from process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
No latch inferred for signal `\dvsd_cmp.\equal_to' from process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
No latch inferred for signal `\dvsd_cmp.\greater_than' from process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
Removing empty process `dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
Cleaned up 2 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module dvsd_cmp..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
dead port 1/2 on $mux $procmux$13.
dead port 1/2 on $mux $procmux$19.
dead port 1/2 on $mux $procmux$7.
Removed 3 multiplexer ports.
<suppressed ~3 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dvsd_cmp:
creating $alu model for $gt$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:33$2 ($gt): new $alu
creating $alu model for $eq$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:40$3 ($eq): merged with $gt$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:33$2.
creating $alu cell for $gt$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:33$2, $eq$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:40$3: $auto$alumacc.cc:474:replace_alu$31
created 1 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.
<suppressed ~3 debug messages>

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$36: { $auto$alumacc.cc:490:replace_alu$32 [0] $auto$alumacc.cc:490:replace_alu$32 [1] $auto$alumacc.cc:490:replace_alu$32 [2] $auto$alumacc.cc:490:replace_alu$32 [3] }
Optimizing cells in module \dvsd_cmp.
Performed a total of 1 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.
<suppressed ~5 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~137 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.
<suppressed ~6 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 6 unused cells and 27 unused wires.
<suppressed ~7 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\dvsd_cmp' to `<abc-temp-dir>/input.blif'..
Extracted 26 gates and 34 wires to a netlist network with 8 inputs and 3 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        8
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:       23
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        3
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \dvsd_cmp

3.25.2. Analyzing design hierarchy..
Top module:  \dvsd_cmp
Removed 0 unused modules.

3.26. Printing statistics.

=== dvsd_cmp ===

Number of wires:                 21
Number of wire bits:             27
Number of public wires:           5
Number of public wire bits:      11
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 19
$_ANDNOT_                       8
$_AND_                          1
$_AOI3_                         2
$_NAND_                         1
$_OAI3_                         1
$_ORNOT_                        2
$_XNOR_                         3
$_XOR_                          1

3.27. Executing CHECK pass (checking for obvious problems).
checking module dvsd_cmp..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
final dff cell mappings:
DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\dvsd_cmp':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.



LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.

LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
Technology set to osu035_redm4 from existing qflow_vars.sh file
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project dvsd_cmp
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef.
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read: encountered 0 errors and 12 warnings total.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.blif  --lef  /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef --cel /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/dvsd_cmp.cel
No dvsd_cmp.cel1 file found for project. . . no partial blockages to apply to layout.
No dvsd_cmp.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  dvsd_cmp

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035_redm4 from existing qflow_vars.sh file
Regenerating files for existing project dvsd_cmp
Running qrouter 1.4.59.T
qrouter -noc  -s dvsd_cmp.cfg
*** Running stage1 routing with defaults
Nets remaining: 30
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 5
Nets remaining: 4
Nets remaining: 3
Nets remaining: 2
Progress: Stage 1 total routes completed: 65
No failed routes!
*** Running stage3 routing with defaults, 1st round
Nets remaining: 30
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 5
Progress: Stage 3 total routes completed: 121
No failed routes!
*** Running stage3 routing with defaults, 2nd round
Nets remaining: 30
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 5
Progress: Stage 3 total routes completed: 176
No failed routes!
*** Writing DEF file dvsd_cmp_route.def
Final: No failed routes!
*** Writing RC file dvsd_cmp_route.rc
Running annotate.tcl antenna.out /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtlnopwr.v
/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.spc /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtlnopwr.anno.v
/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.anno.spc  /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.sp /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp_powerground
Running annotate.tcl
found cell FILL pinlist vdd gnd
Done with annotate.tcl

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035_redm4 from existing qflow_vars.sh file
Regenerating files for existing project dvsd_cmp
Running magic 8.3.50
magic -dnull -noconsole  migrate_dvsd_cmp.tcl

Magic 8.3 revision 50 - Compiled on Thursday 12 August 2021 01:29:35 AM IST.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "migrate_dvsd_cmp.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:     0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
internal:      0 x 0       (     0,  0    ), (     0,  0    )
Reading LEF data from file /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read: Processed 3179 lines.
Reading DEF data from file dvsd_cmp.def.
This action cannot be undone.
Processed 3 vias total.
Processed 44 subcell instances total.
Processed 13 pins total.
Processed 38 nets total.
DEF read, Line 485 (Warning): Number of nets read (5) does not match the number declared (7).
DEF read: Processed 486 lines.
DEF Read: encountered 1 warning total.
Generating LEF output dvsd_cmp.lef for cell dvsd_cmp:
Diagnostic:  Write LEF header for cell dvsd_cmp
Diagnostic:  Writing LEF output for cell dvsd_cmp
Diagnostic:  Scale value is 0.050000
Extracting AOI22X1 into AOI22X1.ext:
Completed 100%
Extracting BUFX2 into BUFX2.ext:
Completed 100%
Extracting AOI21X1 into AOI21X1.ext:
Completed 100%
Extracting AND2X2 into AND2X2.ext:
Completed 100%
Extracting NAND2X1 into NAND2X1.ext:
Completed 100%
Extracting NOR3X1 into NOR3X1.ext:
Completed 100%
Extracting OAI21X1 into OAI21X1.ext:
Completed 100%
Extracting FILL into FILL.ext:
Completed 100%
Extracting NOR2X1 into NOR2X1.ext:
Completed 100%
Extracting OAI22X1 into OAI22X1.ext:
Completed 100%
Extracting INVX1 into INVX1.ext:
Completed 100%
Extracting dvsd_cmp into dvsd_cmp.ext:
Completed 13%
Completed 20%
Completed 27%
Completed 33%
Completed 40%
Completed 47%
Completed 53%
Completed 60%

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035_redm4 from existing qflow_vars.sh file
Regenerating files for existing project dvsd_cmp
Running magic 8.3.50
magic -dnull -noconsole  /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/generate_gds_dvsd_cmp.tcl

Magic 8.3 revision 50 - Compiled on Thursday 12 August 2021 01:29:35 AM IST.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/generate_gds_dvsd_cmp.tcl" from command line.
Root cell box:

...............................................DRC....................................................................................








Qflow DRC logfile created on Friday 13 August 2021 10:30:10 PM IST
magic -dnull -noconsole  /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/run_drc_dvsd_cmp.tcl

Magic 8.3 revision 50 - Compiled on Thursday 12 August 2021 01:29:35 AM IST.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/run_drc_dvsd_cmp.tcl" from command line.
Reading LEF data from file /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read: Processed 3179 lines.
Scaled magic input cell dvsd_cmp geometry by factor of 2
Processing timestamp mismatches: FILL, NOR2X1, INVX1, NAND2X1, OAI21X1, AND2X2, AOI22X1, BUFX2, AOI21X1, NOR3X1, OAI22X1.
drc = 0
DRC checking script ended on Friday 13 August 2021 10:30:11 PM IST


................................LVS..............................................................................






Cell INVX1 disconnected node: A
Cell INVX1 disconnected node: gnd
Cell INVX1 disconnected node: Y
Cell INVX1 disconnected node: vdd

Subcircuit pins:
Circuit 1: INVX1                           |Circuit 2: INVX1                           
-------------------------------------------|-------------------------------------------
A                                          |A                                          
gnd                                        |gnd                                        
Y                                          |Y                                          
vdd                                        |vdd                                        
---------------------------------------------------------------------------------------
Cell pin lists are equivalent.
Device classes INVX1 and INVX1 are equivalent.

Cell OAI22X1 disconnected node: A
Cell OAI22X1 disconnected node: B
Cell OAI22X1 disconnected node: C
Cell OAI22X1 disconnected node: D
Cell OAI22X1 disconnected node: gnd
Cell OAI22X1 disconnected node: Y
Cell OAI22X1 disconnected node: vdd

Subcircuit pins:
Circuit 1: OAI22X1                         |Circuit 2: OAI22X1                         
-------------------------------------------|-------------------------------------------
A                                          |A                                          
B                                          |B                                          
C                                          |C                                          
D                                          |D                                          
gnd                                        |gnd                                        
Y                                          |Y                                          
vdd                                        |vdd                                        
---------------------------------------------------------------------------------------
Cell pin lists are equivalent.
Device classes OAI22X1 and OAI22X1 are equivalent.

Cell NOR2X1 disconnected node: A
Cell NOR2X1 disconnected node: B
Cell NOR2X1 disconnected node: gnd
Cell NOR2X1 disconnected node: Y
Cell NOR2X1 disconnected node: vdd

Subcircuit pins:
Circuit 1: NOR2X1                          |Circuit 2: NOR2X1                          
-------------------------------------------|-------------------------------------------
A                                          |A                                          
B                                          |B                                          
gnd                                        |gnd                                        
Y                                          |Y                                          
vdd                                        |vdd                                        
---------------------------------------------------------------------------------------
Cell pin lists are equivalent.
Device classes NOR2X1 and NOR2X1 are equivalent.

Cell NAND2X1 disconnected node: A
Cell NAND2X1 disconnected node: B
Cell NAND2X1 disconnected node: gnd
Cell NAND2X1 disconnected node: Y
Cell NAND2X1 disconnected node: vdd

Subcircuit pins:
Circuit 1: NAND2X1                         |Circuit 2: NAND2X1                         
-------------------------------------------|-------------------------------------------
A                                          |A                                          
B                                          |B                                          
gnd                                        |gnd                                        
Y                                          |Y                                          
vdd                                        |vdd                                        
---------------------------------------------------------------------------------------
Cell pin lists are equivalent.
Device classes NAND2X1 and NAND2X1 are equivalent.

Cell AND2X2 disconnected node: A
Cell AND2X2 disconnected node: B
Cell AND2X2 disconnected node: gnd
Cell AND2X2 disconnected node: Y
Cell AND2X2 disconnected node: vdd

Subcircuit pins:
Circuit 1: AND2X2                          |Circuit 2: AND2X2                          
-------------------------------------------|-------------------------------------------
A                                          |A                                          
B                                          |B                                          
gnd                                        |gnd                                        
Y                                          |Y                                          
vdd                                        |vdd                                        
---------------------------------------------------------------------------------------
Cell pin lists are equivalent.
Device classes AND2X2 and AND2X2 are equivalent.

Cell OAI21X1 disconnected node: A
Cell OAI21X1 disconnected node: B
Cell OAI21X1 disconnected node: C
Cell OAI21X1 disconnected node: gnd
Cell OAI21X1 disconnected node: Y
Cell OAI21X1 disconnected node: vdd

Subcircuit pins:
Circuit 1: OAI21X1                         |Circuit 2: OAI21X1                         
-------------------------------------------|-------------------------------------------
A                                          |A                                          
B                                          |B                                          
C                                          |C                                          
gnd                                        |gnd                                        
Y                                          |Y                                          
vdd                                        |vdd                                        
---------------------------------------------------------------------------------------
Cell pin lists are equivalent.
Device classes OAI21X1 and OAI21X1 are equivalent.

Cell AOI21X1 disconnected node: A
Cell AOI21X1 disconnected node: B
Cell AOI21X1 disconnected node: C
Cell AOI21X1 disconnected node: gnd
Cell AOI21X1 disconnected node: Y
Cell AOI21X1 disconnected node: vdd

Subcircuit pins:
Circuit 1: AOI21X1                         |Circuit 2: AOI21X1                         
-------------------------------------------|-------------------------------------------
A                                          |A                                          
B                                          |B                                          
C                                          |C                                          
gnd                                        |gnd                                        
Y                                          |Y                                          
vdd                                        |vdd                                        
---------------------------------------------------------------------------------------
Cell pin lists are equivalent.
Device classes AOI21X1 and AOI21X1 are equivalent.

Cell NOR3X1 disconnected node: A
Cell NOR3X1 disconnected node: B
Cell NOR3X1 disconnected node: C
Cell NOR3X1 disconnected node: gnd
Cell NOR3X1 disconnected node: Y
Cell NOR3X1 disconnected node: vdd

Subcircuit pins:
Circuit 1: NOR3X1                          |Circuit 2: NOR3X1                          
-------------------------------------------|-------------------------------------------
A                                          |A                                          
B                                          |B                                          
C                                          |C                                          
gnd                                        |gnd                                        
Y                                          |Y                                          
vdd                                        |vdd                                        
---------------------------------------------------------------------------------------
Cell pin lists are equivalent.
Device classes NOR3X1 and NOR3X1 are equivalent.

Cell AOI22X1 disconnected node: A
Cell AOI22X1 disconnected node: B
Cell AOI22X1 disconnected node: C
Cell AOI22X1 disconnected node: D
Cell AOI22X1 disconnected node: gnd
Cell AOI22X1 disconnected node: Y
Cell AOI22X1 disconnected node: vdd

Subcircuit pins:
Circuit 1: AOI22X1                         |Circuit 2: AOI22X1                         
-------------------------------------------|-------------------------------------------
A                                          |A                                          
B                                          |B                                          
C                                          |C                                          
D                                          |D                                          
gnd                                        |gnd                                        
Y                                          |Y                                          
vdd                                        |vdd                                        
---------------------------------------------------------------------------------------
Cell pin lists are equivalent.
Device classes AOI22X1 and AOI22X1 are equivalent.

Cell BUFX2 disconnected node: A
Cell BUFX2 disconnected node: gnd
Cell BUFX2 disconnected node: Y
Cell BUFX2 disconnected node: vdd

Subcircuit pins:
Circuit 1: BUFX2                           |Circuit 2: BUFX2                           
-------------------------------------------|-------------------------------------------
A                                          |A                                          
gnd                                        |gnd                                        
Y                                          |Y                                          
vdd                                        |vdd                                        
---------------------------------------------------------------------------------------
Cell pin lists are equivalent.
Device classes BUFX2 and BUFX2 are equivalent.

Subcircuit summary:
Circuit 1: dvsd_cmp                        |Circuit 2: dvsd_cmp                        
-------------------------------------------|-------------------------------------------
INVX1 (7)                                  |INVX1 (7)                                  
AOI22X1 (1)                                |AOI22X1 (1)                                
NOR3X1 (1)                                 |NOR3X1 (1)                                 
OAI21X1 (4)                                |OAI21X1 (4)                                
BUFX2 (3)                                  |BUFX2 (3)                                  
AOI21X1 (1)                                |AOI21X1 (1)                                
NOR2X1 (5)                                 |NOR2X1 (5)                                 
NAND2X1 (3)                                |NAND2X1 (3)                                
AND2X2 (3)                                 |AND2X2 (3)                                 
OAI22X1 (2)                                |OAI22X1 (2)                                
Number of devices: 30                      |Number of devices: 30                      
Number of nets: 40                         |Number of nets: 40                         
---------------------------------------------------------------------------------------
Circuits match uniquely.
Netlists match uniquely.

Subcircuit pins:
Circuit 1: dvsd_cmp                        |Circuit 2: dvsd_cmp                        
-------------------------------------------|-------------------------------------------
A_in[1]                                    |A_in[1]                                    
less_than                                  |less_than                                  
greater_than                               |greater_than                               
equal_to                                   |equal_to                                   
B_in[3]                                    |B_in[3]                                    
A_in[2]                                    |A_in[2]                                    
A_in[3]                                    |A_in[3]                                    
A_in[0]                                    |A_in[0]                                    
vdd                                        |vdd                                        
gnd                                        |gnd                                        
B_in[2]                                    |B_in[2]                                    
B_in[1]                                    |B_in[1]                                    
B_in[0]                                    |B_in[0]                                    
---------------------------------------------------------------------------------------
Cell pin lists are equivalent.
Device classes dvsd_cmp and dvsd_cmp are equivalent.
Circuits match uniquely.



.........................................................GDS file............................................................










Qflow gdsii logfile created on Friday 13 August 2021 10:30:12 PM IST
magic -dnull -noconsole  /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/generate_gds_dvsd_cmp.tcl

Magic 8.3 revision 50 - Compiled on Thursday 12 August 2021 01:29:35 AM IST.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/generate_gds_dvsd_cmp.tcl" from command line.
Root cell box:
           width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:     0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
internal:      0 x 0       (     0,  0    ), (     0,  0    )
Warning: Calma reading is not undoable!  I hope that's OK.
Library written using GDS-II Release 3.0
Library name: iit_stdcells
Reading "FILL".
Moving label "vdd" from space to metal1 in cell FILL.
Moving label "gnd" from space to metal1 in cell FILL.
Reading "AND2X1".
Moving label "Y" from space to metal1 in cell AND2X1.
Moving label "B" from space to metal1 in cell AND2X1.
Moving label "vdd" from space to metal1 in cell AND2X1.
Moving label "gnd" from space to metal1 in cell AND2X1.
Moving label "A" from space to metal1 in cell AND2X1.
Reading "AND2X2".
Moving label "vdd" from space to metal1 in cell AND2X2.
Moving label "gnd" from space to metal1 in cell AND2X2.
Moving label "A" from space to metal1 in cell AND2X2.
Moving label "B" from space to metal1 in cell AND2X2.
Moving label "Y" from space to metal1 in cell AND2X2.
Reading "AOI21X1".
Moving label "gnd" from space to metal1 in cell AOI21X1.
Moving label "vdd" from space to metal1 in cell AOI21X1.
Moving label "A" from space to metal1 in cell AOI21X1.
Moving label "B" from space to metal1 in cell AOI21X1.
Moving label "Y" from space to metal1 in cell AOI21X1.
Moving label "C" from space to metal1 in cell AOI21X1.
Reading "AOI22X1".
Moving label "gnd" from space to metal1 in cell AOI22X1.
Moving label "vdd" from space to metal1 in cell AOI22X1.
Moving label "C" from space to metal1 in cell AOI22X1.
Moving label "D" from space to metal1 in cell AOI22X1.
Moving label "Y" from space to metal1 in cell AOI22X1.
Moving label "A" from space to metal1 in cell AOI22X1.
Moving label "B" from space to metal1 in cell AOI22X1.
Reading "BUFX2".
Moving label "vdd" from space to metal1 in cell BUFX2.
Moving label "gnd" from space to metal1 in cell BUFX2.
Moving label "A" from space to metal1 in cell BUFX2.
Moving label "Y" from space to metal1 in cell BUFX2.
Reading "BUFX4".
Moving label "vdd" from space to metal1 in cell BUFX4.
Moving label "gnd" from space to metal1 in cell BUFX4.
Moving label "A" from space to metal1 in cell BUFX4.
Moving label "Y" from space to metal1 in cell BUFX4.
Reading "DFFNEGX1".
Moving label "CLK" from space to metal1 in cell DFFNEGX1.
Moving label "vdd" from space to metal1 in cell DFFNEGX1.
Moving label "D" from space to metal1 in cell DFFNEGX1.
Moving label "gnd" from space to metal1 in cell DFFNEGX1.
Moving label "Q" from space to metal1 in cell DFFNEGX1.
Reading "NOR3X1".
Moving label "vdd" from space to metal1 in cell NOR3X1.
Moving label "gnd" from space to metal1 in cell NOR3X1.
Moving label "B" from space to metal1 in cell NOR3X1.
Moving label "C" from space to metal1 in cell NOR3X1.
Moving label "A" from space to metal1 in cell NOR3X1.
Moving label "Y" from space to metal1 in cell NOR3X1.
Reading "DFFPOSX1".
Moving label "vdd" from space to metal1 in cell DFFPOSX1.
Moving label "D" from space to metal1 in cell DFFPOSX1.
Moving label "gnd" from space to metal1 in cell DFFPOSX1.
Moving label "Q" from space to metal1 in cell DFFPOSX1.
Moving label "CLK" from space to metal1 in cell DFFPOSX1.
Reading "FAX1".
Moving label "gnd" from space to metal1 in cell FAX1.
Moving label "vdd" from space to metal1 in cell FAX1.
Moving label "A" from space to metal1 in cell FAX1.
Moving label "B" from space to metal1 in cell FAX1.
Moving label "C" from space to metal1 in cell FAX1.
Moving label "YC" from space to metal1 in cell FAX1.
Moving label "YS" from space to metal1 in cell FAX1.
Reading "HAX1".
Moving label "vdd" from space to metal1 in cell HAX1.
Moving label "gnd" from space to metal1 in cell HAX1.
Moving label "YC" from space to metal1 in cell HAX1.
Moving label "A" from space to metal1 in cell HAX1.
Moving label "B" from space to metal1 in cell HAX1.
Moving label "YS" from space to metal1 in cell HAX1.
Reading "INVX1".
Moving label "A" from space to metal1 in cell INVX1.
Moving label "Y" from space to metal1 in cell INVX1.
Moving label "vdd" from space to metal1 in cell INVX1.
Moving label "gnd" from space to metal1 in cell INVX1.
Reading "INVX2".
Moving label "vdd" from space to metal1 in cell INVX2.
Moving label "gnd" from space to metal1 in cell INVX2.
Moving label "Y" from space to metal1 in cell INVX2.
Moving label "A" from space to metal1 in cell INVX2.
Reading "INVX4".
Moving label "vdd" from space to metal1 in cell INVX4.
Moving label "gnd" from space to metal1 in cell INVX4.
Moving label "Y" from space to metal1 in cell INVX4.
Moving label "A" from space to metal1 in cell INVX4.
Reading "INVX8".
Moving label "vdd" from space to metal1 in cell INVX8.
Moving label "gnd" from space to metal1 in cell INVX8.
Moving label "A" from space to metal1 in cell INVX8.
Moving label "Y" from space to metal1 in cell INVX8.
Reading "NAND2X1".
Moving label "vdd" from space to metal1 in cell NAND2X1.
Moving label "Y" from space to metal1 in cell NAND2X1.
Moving label "gnd" from space to metal1 in cell NAND2X1.
Moving label "A" from space to metal1 in cell NAND2X1.
Moving label "B" from space to metal1 in cell NAND2X1.
Reading "NAND3X1".
Moving label "B" from space to metal1 in cell NAND3X1.
Moving label "vdd" from space to metal1 in cell NAND3X1.
Moving label "gnd" from space to metal1 in cell NAND3X1.
Moving label "A" from space to metal1 in cell NAND3X1.
Moving label "C" from space to metal1 in cell NAND3X1.
Moving label "Y" from space to metal1 in cell NAND3X1.
Reading "NOR2X1".
Moving label "vdd" from space to metal1 in cell NOR2X1.
Moving label "B" from space to metal1 in cell NOR2X1.
Moving label "gnd" from space to metal1 in cell NOR2X1.
Moving label "Y" from space to metal1 in cell NOR2X1.
Moving label "A" from space to metal1 in cell NOR2X1.
Reading "OAI21X1".
Moving label "gnd" from space to metal1 in cell OAI21X1.
Moving label "vdd" from space to metal1 in cell OAI21X1.
Moving label "A" from space to metal1 in cell OAI21X1.
Moving label "B" from space to metal1 in cell OAI21X1.
Moving label "Y" from space to metal1 in cell OAI21X1.
Moving label "C" from space to metal1 in cell OAI21X1.
Reading "OAI22X1".
Moving label "gnd" from space to metal1 in cell OAI22X1.
Moving label "vdd" from space to metal1 in cell OAI22X1.
Moving label "D" from space to metal1 in cell OAI22X1.
Moving label "C" from space to metal1 in cell OAI22X1.
Moving label "A" from space to metal1 in cell OAI22X1.
Moving label "B" from space to metal1 in cell OAI22X1.
Moving label "Y" from space to metal1 in cell OAI22X1.
Reading "OR2X1".
Moving label "Y" from space to metal1 in cell OR2X1.
Moving label "B" from space to metal1 in cell OR2X1.
Moving label "vdd" from space to metal1 in cell OR2X1.
Moving label "gnd" from space to metal1 in cell OR2X1.
Moving label "A" from space to metal1 in cell OR2X1.
Reading "OR2X2".
Moving label "Y" from space to metal1 in cell OR2X2.
Moving label "B" from space to metal1 in cell OR2X2.
Moving label "vdd" from space to metal1 in cell OR2X2.
Moving label "gnd" from space to metal1 in cell OR2X2.
Moving label "A" from space to metal1 in cell OR2X2.
Reading "TBUFX1".
Moving label "vdd" from space to metal1 in cell TBUFX1.
Moving label "gnd" from space to metal1 in cell TBUFX1.
Moving label "EN" from space to metal1 in cell TBUFX1.
Moving label "A" from space to metal1 in cell TBUFX1.
Moving label "Y" from space to metal1 in cell TBUFX1.
Reading "TBUFX2".
Moving label "vdd" from space to metal1 in cell TBUFX2.
Moving label "gnd" from space to metal1 in cell TBUFX2.
Moving label "A" from space to metal1 in cell TBUFX2.
Moving label "EN" from space to metal1 in cell TBUFX2.
Moving label "Y" from space to metal1 in cell TBUFX2.
Reading "XOR2X1".
Moving label "Y" from space to metal1 in cell XOR2X1.
Moving label "vdd" from space to metal1 in cell XOR2X1.
Moving label "B" from space to metal1 in cell XOR2X1.
Moving label "A" from space to metal1 in cell XOR2X1.
Moving label "gnd" from space to metal1 in cell XOR2X1.
Reading "MUX2X1".
Moving label "S" from space to metal1 in cell MUX2X1.
Moving label "vdd" from space to metal1 in cell MUX2X1.
Moving label "gnd" from space to metal1 in cell MUX2X1.
Moving label "Y" from space to metal1 in cell MUX2X1.
Moving label "A" from space to metal1 in cell MUX2X1.
Moving label "B" from space to metal1 in cell MUX2X1.
Reading "XNOR2X1".
Moving label "A" from space to metal1 in cell XNOR2X1.
Moving label "B" from space to metal1 in cell XNOR2X1.
Moving label "gnd" from space to metal1 in cell XNOR2X1.
Moving label "vdd" from space to metal1 in cell XNOR2X1.
Moving label "Y" from space to metal1 in cell XNOR2X1.
Reading "LATCH".
Moving label "D" from space to metal1 in cell LATCH.
Moving label "Q" from space to metal1 in cell LATCH.
Moving label "gnd" from space to metal1 in cell LATCH.
Moving label "vdd" from space to metal1 in cell LATCH.
Moving label "CLK" from space to metal1 in cell LATCH.
Reading "DFFSR".
Moving label "gnd" from space to metal1 in cell DFFSR.
Moving label "vdd" from space to metal1 in cell DFFSR.
Moving label "D" from space to metal1 in cell DFFSR.
Moving label "S" from space to metal1 in cell DFFSR.
Moving label "R" from space to metal1 in cell DFFSR.
Moving label "Q" from space to metal1 in cell DFFSR.
Moving label "CLK" from space to metal1 in cell DFFSR.
Reading "CLKBUF1".
Moving label "A" from space to metal1 in cell CLKBUF1.
Moving label "vdd" from space to metal1 in cell CLKBUF1.
Moving label "gnd" from space to metal1 in cell CLKBUF1.
Moving label "Y" from space to metal1 in cell CLKBUF1.
Reading "CLKBUF2".
Moving label "vdd" from space to metal1 in cell CLKBUF2.
Moving label "gnd" from space to metal1 in cell CLKBUF2.
Moving label "A" from space to metal1 in cell CLKBUF2.
Moving label "Y" from space to metal1 in cell CLKBUF2.
Reading "CLKBUF3".
Moving label "gnd" from space to metal1 in cell CLKBUF3.
Moving label "vdd" from space to metal1 in cell CLKBUF3.
Moving label "A" from space to metal1 in cell CLKBUF3.
Moving label "Y" from space to metal1 in cell CLKBUF3.
Reading "iit_stdcells".
Scaled magic input cell dvsd_cmp geometry by factor of 2
Processing timestamp mismatches: FILL, NOR2X1, INVX1, NAND2X1, OAI21X1, AND2X2, AOI22X1, BUFX2, AOI21X1, NOR3X1, OAI22X1.
GDS generating script ended on Friday 13 August 2021 10:30:13 PM IST





...........................................Cleanup..................................................................................






Starting new log file Fri Aug 13 22:17:24 2021

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035_redm4 from existing qflow_vars.sh file
Regenerating files for existing project dvsd_cmp
Running yosys for verilog parsing and synthesis
yosys  -s dvsd_cmp.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `dvsd_cmp.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v
Parsing Verilog input from `/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v' to AST representation.
Generating RTLIL representation for module `\dvsd_cmp'.
Note: Assuming pure combinatorial block at /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \dvsd_cmp

3.1.2. Analyzing design hierarchy..
Top module:  \dvsd_cmp
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1 in module dvsd_cmp.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
1/9: $2\greater_than[0:0]
2/9: $2\equal_to[0:0]
3/9: $2\less_than[0:0]
4/9: $1\greater_than[0:0]
5/9: $1\equal_to[0:0]
6/9: $1\less_than[0:0]
7/9: $0\greater_than[0:0]
8/9: $0\equal_to[0:0]
9/9: $0\less_than[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\dvsd_cmp.\less_than' from process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
No latch inferred for signal `\dvsd_cmp.\equal_to' from process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
No latch inferred for signal `\dvsd_cmp.\greater_than' from process `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
Removing empty process `dvsd_cmp.$proc$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:30$1'.
Cleaned up 2 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module dvsd_cmp..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
dead port 1/2 on $mux $procmux$13.
dead port 1/2 on $mux $procmux$19.
dead port 1/2 on $mux $procmux$7.
Removed 3 multiplexer ports.
<suppressed ~3 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dvsd_cmp:
creating $alu model for $gt$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:33$2 ($gt): new $alu
creating $alu model for $eq$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:40$3 ($eq): merged with $gt$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:33$2.
creating $alu cell for $gt$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:33$2, $eq$/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/source/dvsd_cmp.v:40$3: $auto$alumacc.cc:474:replace_alu$31
created 1 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.
<suppressed ~3 debug messages>

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$36: { $auto$alumacc.cc:490:replace_alu$32 [0] $auto$alumacc.cc:490:replace_alu$32 [1] $auto$alumacc.cc:490:replace_alu$32 [2] $auto$alumacc.cc:490:replace_alu$32 [3] }
Optimizing cells in module \dvsd_cmp.
Performed a total of 1 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.
<suppressed ~5 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \dvsd_cmp.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~137 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.
<suppressed ~6 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 6 unused cells and 27 unused wires.
<suppressed ~7 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\dvsd_cmp' to `<abc-temp-dir>/input.blif'..
Extracted 26 gates and 34 wires to a netlist network with 8 inputs and 3 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        8
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:       23
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        3
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_cmp..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \dvsd_cmp

3.25.2. Analyzing design hierarchy..
Top module:  \dvsd_cmp
Removed 0 unused modules.

3.26. Printing statistics.

=== dvsd_cmp ===

Number of wires:                 21
Number of wire bits:             27
Number of public wires:           5
Number of public wire bits:      11
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 19
$_ANDNOT_                       8
$_AND_                          1
$_AOI3_                         2
$_NAND_                         1
$_OAI3_                         1
$_ORNOT_                        2
$_XNOR_                         3
$_XOR_                          1

3.27. Executing CHECK pass (checking for obvious problems).
checking module dvsd_cmp..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
final dff cell mappings:
DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\dvsd_cmp':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_cmp.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_cmp'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_cmp..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.



LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.

LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
Technology set to osu035_redm4 from existing qflow_vars.sh file
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project dvsd_cmp
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef.
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read: encountered 0 errors and 12 warnings total.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.blif  --lef  /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef --cel /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/dvsd_cmp.cel
No dvsd_cmp.cel1 file found for project. . . no partial blockages to apply to layout.
No dvsd_cmp.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  dvsd_cmp

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035_redm4 from existing qflow_vars.sh file
Regenerating files for existing project dvsd_cmp
Running qrouter 1.4.59.T
qrouter -noc  -s dvsd_cmp.cfg
*** Running stage1 routing with defaults
Nets remaining: 30
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 5
Nets remaining: 4
Nets remaining: 3
Nets remaining: 2
Progress: Stage 1 total routes completed: 65
No failed routes!
*** Running stage3 routing with defaults, 1st round
Nets remaining: 30
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 5
Progress: Stage 3 total routes completed: 121
No failed routes!
*** Running stage3 routing with defaults, 2nd round
Nets remaining: 30
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 5
Progress: Stage 3 total routes completed: 176
No failed routes!
*** Writing DEF file dvsd_cmp_route.def
Final: No failed routes!
*** Writing RC file dvsd_cmp_route.rc
Running annotate.tcl antenna.out /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtlnopwr.v
/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.spc /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.rtlnopwr.anno.v
/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp.anno.spc  /usr/local/share/qflow/tech/osu035_redm4/osu035_stdcells.sp /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/synthesis/dvsd_cmp_powerground
Running annotate.tcl
found cell FILL pinlist vdd gnd
Done with annotate.tcl

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035_redm4 from existing qflow_vars.sh file
Regenerating files for existing project dvsd_cmp
Running magic 8.3.50
magic -dnull -noconsole  migrate_dvsd_cmp.tcl

Magic 8.3 revision 50 - Compiled on Thursday 12 August 2021 01:29:35 AM IST.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "migrate_dvsd_cmp.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:     0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
internal:      0 x 0       (     0,  0    ), (     0,  0    )
Reading LEF data from file /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read: Processed 3179 lines.
Reading DEF data from file dvsd_cmp.def.
This action cannot be undone.
Processed 3 vias total.
Processed 44 subcell instances total.
Processed 13 pins total.
Processed 38 nets total.
DEF read, Line 485 (Warning): Number of nets read (5) does not match the number declared (7).
DEF read: Processed 486 lines.
DEF Read: encountered 1 warning total.
Generating LEF output dvsd_cmp.lef for cell dvsd_cmp:
Diagnostic:  Write LEF header for cell dvsd_cmp
Diagnostic:  Writing LEF output for cell dvsd_cmp
Diagnostic:  Scale value is 0.050000
Extracting AOI22X1 into AOI22X1.ext:
Completed 100%
Extracting BUFX2 into BUFX2.ext:
Completed 100%
Extracting AOI21X1 into AOI21X1.ext:
Completed 100%
Extracting AND2X2 into AND2X2.ext:
Completed 100%
Extracting NAND2X1 into NAND2X1.ext:
Completed 100%
Extracting NOR3X1 into NOR3X1.ext:
Completed 100%
Extracting OAI21X1 into OAI21X1.ext:
Completed 100%
Extracting FILL into FILL.ext:
Completed 100%
Extracting NOR2X1 into NOR2X1.ext:
Completed 100%
Extracting OAI22X1 into OAI22X1.ext:
Completed 100%
Extracting INVX1 into INVX1.ext:
Completed 100%
Extracting dvsd_cmp into dvsd_cmp.ext:
Completed 13%
Completed 20%
Completed 27%
Completed 33%
Completed 40%
Completed 47%
Completed 53%
Completed 60%

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035_redm4 from existing qflow_vars.sh file
Regenerating files for existing project dvsd_cmp
Running magic 8.3.50
magic -dnull -noconsole  /home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/generate_gds_dvsd_cmp.tcl

Magic 8.3 revision 50 - Compiled on Thursday 12 August 2021 01:29:35 AM IST.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "/home/vanshika/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/qflow/layout/generate_gds_dvsd_cmp.tcl" from command line.
Root cell box:


